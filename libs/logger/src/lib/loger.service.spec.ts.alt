import { TestBed } from '@angular/core/testing';
import { LogAppender } from './log-appender';
import { LoggerService } from './logger.service';
import { LogLevel } from './log-appender';
import { LoggerConfig } from './logger.config';
import { LoggerModule } from './logger.module';

class TestLogAppender implements LogAppender {
  readonly logs: Array<{level: LogLevel, message: string}> = [];

  append(level: LogLevel, message: string): void {
    this.logs.push({ level, message });
  }
}

describe('LogFormatterService', () => {
  let logger: LoggerService;
  let appender: TestLogAppender;
  let config: LoggerConfig;

  beforeEach(() => {

    config = {
      enableDebug: true,
      appender: TestLogAppender,
    };

    TestBed.configureTestingModule({
      imports: [
        LoggerModule.forRoot(config)
      ]
    });

    logger = TestBed.inject(LoggerService);
    appender = TestBed.inject(LogAppender) as TestLogAppender;
    // config = TestBed.inject(LoggerConfig);
  });

  it('should debug', () => {
    config.enableDebug = true;
    logger.debug('debug!');

    expect(appender.logs.length).toBe(1);
    expect(appender.logs).toContainEqual({ level: 'DEBUG', message: 'debug!' });
  });

  it('should not debug', () => {
    config.enableDebug = false;
    logger.debug('debug!');

    expect(appender.logs.length).toBe(0);
  });

  it('should log', () => {
    config.enableDebug = true;
    logger.log('log!');

    expect(appender.logs).toContainEqual({ level: 'LOG', message: 'log!' });
  });

  it('should log even if enableDebug = false', () => {
    config.enableDebug = false;
    logger.log('log!');

    expect(appender.logs).toContainEqual({ level: 'LOG', message: 'log!' });
  });

});
